/**
 * 
 */
package classes;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import java.util.Queue;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * @author Iaroslav_Grytsaienko
 *
 */
@RunWith(MockitoJUnitRunner.class)
public class PrefixMatcherTest {
	
	@Mock
	private Trie mockTrie;
	
	@InjectMocks
	private PrefixMatcher prefMatcherInj;
	/**
	 * @throws java.lang.Exception
	 */
	
	@Before
	public void setUp() throws Exception {
		
		PrefixMatcher prefMatcher = new PrefixMatcher();
		prefMatcher.add("a ab abc abc abcdx abcdxs  asdasdawdsd	");
		prefMatcher.add("abcds", "abcdw");
		String[] strMass = { "abb", "abbc" };
		prefMatcher.add(strMass);
		
		prefMatcherInj.add("a ab abc abc abcdx abcdxs  asdasdawdsd	");
		prefMatcherInj.add("abcds", "abcdw");
		String[] strMass = { "abb", "abbc" };
		prefMatcherInj.add(strMass);
	}

	@Test
	public void addTest(){
		

		
		verify(mockTrie, times(9)).add(any(Tuple.class));
	
	}
	
	
	@Test
	public void wordsWithPrefixStringIntTest() {
		
		PrefixMatcher prefMatcher = new PrefixMatcher();
		prefMatcher.add("a ab abc abc abcdx abcdxs  asdasdawdsd	");
		prefMatcher.add("abcds", "abcdw");
		String[] strMass = { "abb", "abbc" };
		prefMatcher.add(strMass);

		Queue<String> wordsWithPrefAB2 = (Queue<String>) prefMatcher.wordsWithPrefix("abc", 2);
		assertTrue(wordsWithPrefAB2.size() == 4);
	}

	@Test
	public void wordsWithPrefixStringTest() {
		
		PrefixMatcher prefMatcher = new PrefixMatcher();
		prefMatcher.add("a ab abc abc abcdx abcdxs  asdasdawdsd	");
		prefMatcher.add("abcds", "abcdw");
		String[] strMass = { "abb", "abbc" };
		prefMatcher.add(strMass);

		Queue<String> wordsWithPrefAB = (Queue<String>) prefMatcher.wordsWithPrefix("ab");
		Queue<String> wordsWithPrefAS = (Queue<String>) prefMatcher.wordsWithPrefix("as");
		assertTrue(wordsWithPrefAB.size() == 6);
		assertTrue(wordsWithPrefAS.size() == 0);
	}

	@Test
	public void deleteTest() {
		
		PrefixMatcher prefMatcher = new PrefixMatcher();
		prefMatcher.add("a ab abc abc abcdx abcdxs  asdasdawdsd	");
		prefMatcher.add("abcds", "abcdw");
		String[] strMass = { "abb", "abbc" };
		prefMatcher.add(strMass);

		assertTrue(prefMatcher.delete("abb"));
		assertFalse(prefMatcher.contains("abb"));
		assertTrue(prefMatcher.size() == 7);
	}

	@Test
	public void addAndSizeTest() {
		
		PrefixMatcher prefMatcher = new PrefixMatcher();
		prefMatcher.add("a ab abc abc abcdx abcdxs  asdasdawdsd	");
		prefMatcher.add("abcds", "abcdw");
		String[] strMass = { "abb", "abbc" };
		prefMatcher.add(strMass);

		assertTrue(prefMatcher.size() == 8);
	}

	@Test
	public void containsTest() {
		
		PrefixMatcher prefMatcher = new PrefixMatcher();
		prefMatcher.add("a ab abc abc abcdx abcdxs  asdasdawdsd	");
		prefMatcher.add("abcds", "abcdw");
		String[] strMass = { "abb", "abbc" };
		prefMatcher.add(strMass);

		assertTrue(prefMatcher.contains("abc"));
		assertTrue(prefMatcher.contains("abcdx"));
		assertTrue(prefMatcher.contains("abcdxs"));
		assertTrue(prefMatcher.contains("asdasdawdsd"));
		assertTrue(prefMatcher.contains("abcds"));
		assertTrue(prefMatcher.contains("abcdw"));
		assertTrue(prefMatcher.contains("abb"));
		assertTrue(prefMatcher.contains("abbc"));
		assertFalse(prefMatcher.contains("ab"));
	}
}
